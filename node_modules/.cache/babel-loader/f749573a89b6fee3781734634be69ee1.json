{"ast":null,"code":"var _jsxFileName = \"/home/ronx/Downloads/una-front-development (1)/una-front-development/src/components/landingPage/index.js\";\nimport React, { useState } from 'react';\nimport Logo from '../../assets/126.png';\nimport Background from '../../assets/background.jpg';\nimport './Login.css';\nimport passwordValidator from 'password-validator';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form } from 'react-bootstrap';\nimport jwt from 'jsonwebtoken';\n\nfunction Login() {\n  const [login, setLogin] = useState(\"\");\n  const [senha, setSenha] = useState(\"\");\n  const [instrucaoSenha, setInstrucaoSenha] = useState(\"\");\n  const history = useHistory();\n\n  const routeChange = name => {\n    let path = `/`.concat(name);\n    history.push(path); //joga o usuário pra essa path\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"divInterna\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"textoTopo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 50\n    }\n  }, \"O melhor dos servi\\xE7os \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 79\n    }\n  }, \"com a maior agilidade!\")), /*#__PURE__*/React.createElement(\"a\", {\n    href: '/',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"Logo\",\n    style: {\n      height: \"200px\",\n      width: \"200px\"\n    },\n    src: Logo,\n    alt: 'Logo do Website',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    placeholder: \"Email\",\n    value: login.toString(),\n    onChange: text => setLogin(text.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, \"Seu email nunca ser\\xE1 compartilhado por n\\xF3s.\")), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    placeholder: \"Senha\",\n    value: senha.toString(),\n    onChange: text => setSenha(text.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, instrucaoSenha), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-custom\",\n    onClick: () => {\n      let checagem = checaCredenciais(login, senha);\n\n      if (checagem[0]) {\n        console.log(\"Seu token \", checagem[0]);\n\n        if (checagem[1] == 'profissional') {\n          routeChange(\"profissional\");\n        } else if (checagem[1] == 'cliente') {\n          routeChange(\"cliente\");\n        }\n      } else {\n        alert(\"Login e/ou senha incorretos\");\n        setLogin(\"\");\n        setSenha(\"\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Login\")), \"\\uFEFF\"));\n} // function validarSenha(senha){\n//     var schema = new passwordValidator();\n//     schema\n//     .is().min(8)                                    // Minimum length 8\n//     .is().max(100)                                  // Maximum length 100\n//     .has().uppercase()                              // Must have uppercase letters\n//     .has().lowercase()                              // Must have lowercase letters\n//     .has().digits(2)                                // Must have at least 2 digits\n//     .has().not().spaces()                           // Should not have spaces\n//     .is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values\n//     return schema.validate(senha)\n// }\n// if(validarSenha({senha}) == false){\n//     setInstrucaoSenha(\"Sua senha deve conter entre 8 e 100 dígitos, 1 letra maiúscula, 1 letra minúscula, dois dígitos e não deve conter espaços\")\n//     setSenha(\"\")\n// }\n// else{}\n\n\nfunction checaCredenciais(login, senha) {\n  console.log(\"Login \", login, \" senha \", senha);\n\n  if (login == jsonLoginCorreto.login && senha == jsonLoginCorreto.senha) {\n    var privateKey = \"minhaChaveSuperSecreta\";\n    var token = jwt.sign({\n      foo: 'bar'\n    }, privateKey);\n    return [token, jsonLoginCorreto.tipoPerfil];\n  } else {\n    alert(\"Login ou senha incorretos\");\n    return [];\n  }\n}\n\nlet jsonLoginCorreto = {\n  \"login\": \"andre\",\n  \"senha\": \"12345\",\n  \"tipoPerfil\": \"cliente\"\n};\nexport default Login; // em linhas ou colunas, usando flex\n//  ou em linhas e colunas, usando grid","map":{"version":3,"sources":["/home/ronx/Downloads/una-front-development (1)/una-front-development/src/components/landingPage/index.js"],"names":["React","useState","Logo","Background","passwordValidator","useHistory","Button","Form","jwt","Login","login","setLogin","senha","setSenha","instrucaoSenha","setInstrucaoSenha","history","routeChange","name","path","concat","push","height","width","toString","text","target","value","checagem","checaCredenciais","console","log","alert","jsonLoginCorreto","privateKey","token","sign","foo","tipoPerfil"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Logo from '../../assets/126.png'\nimport Background from '../../assets/background.jpg'\nimport './Login.css'\nimport passwordValidator from 'password-validator';\nimport {useHistory} from 'react-router-dom'\nimport {Button, Form} from 'react-bootstrap';\nimport jwt from 'jsonwebtoken'\n\nfunction Login() {\n\n    const [login, setLogin] = useState(\"\");\n    const [senha, setSenha] = useState(\"\");\n    const [instrucaoSenha, setInstrucaoSenha] = useState(\"\");\n    const history = useHistory();\n    \n    const routeChange = (name) => {\n        let path = `/`.concat(name);\n        history.push(path);//joga o usuário pra essa path\n    }\n\n    return (\n        <div>\n            <div className={\"Login\"}>\n\n                <div className={\"divInterna\"}>\n                    <h1 className={\"textoTopo\"}> <p>O melhor dos serviços </p><p>com a maior agilidade!</p></h1>\n                    <a href={'/'}>\n                        <img className=\"Logo\" style={{ height: \"200px\", width: \"200px\" }} src={Logo} alt={'Logo do Website'} />\n                    </a>\n                    <Form>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Control type=\"email\" placeholder=\"Email\" value={login.toString()} onChange={(text)=>setLogin(text.target.value)} />\n                            <Form.Text className=\"text-muted\">\n                               Seu email nunca será compartilhado por nós.\n                             </Form.Text>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Control type=\"password\" placeholder=\"Senha\" value={senha.toString()} onChange={(text)=>setSenha(text.target.value)}/>\n                            \n                        </Form.Group>\n                        \n                    </Form>\n                    <Form.Text className=\"text-muted\">\n                               {instrucaoSenha}\n                    </Form.Text>\n                    <Button className={\"btn-custom\"}  \n                        onClick={() => {\n                            let checagem = checaCredenciais(login, senha);\n                                    if(checagem[0]){\n                                        console.log(\"Seu token \" , checagem[0])\n                                        if(checagem[1]=='profissional'){\n                                            routeChange(\"profissional\");\n                                        }\n                                        else if(checagem[1]=='cliente'){\n                                            routeChange(\"cliente\")\n                                        }\n                                    }\n                                    else{\n                                        alert(\"Login e/ou senha incorretos\");\n                                        setLogin(\"\");\n                                        setSenha(\"\");\n                                    }\n                            }\n                    }\n                    >\n                                Login\n                    </Button>\n                </div>\n                ﻿\n            </div>\n        </div>\n    )\n}\n\n\n// function validarSenha(senha){\n//     var schema = new passwordValidator();\n//     schema\n//     .is().min(8)                                    // Minimum length 8\n//     .is().max(100)                                  // Maximum length 100\n//     .has().uppercase()                              // Must have uppercase letters\n//     .has().lowercase()                              // Must have lowercase letters\n//     .has().digits(2)                                // Must have at least 2 digits\n//     .has().not().spaces()                           // Should not have spaces\n//     .is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values\n//     return schema.validate(senha)\n// }\n// if(validarSenha({senha}) == false){\n//     setInstrucaoSenha(\"Sua senha deve conter entre 8 e 100 dígitos, 1 letra maiúscula, 1 letra minúscula, dois dígitos e não deve conter espaços\")\n//     setSenha(\"\")\n// }\n// else{}\n\nfunction checaCredenciais(login,senha){\n    console.log(\"Login \", login, \" senha \", senha)\n    if(login == jsonLoginCorreto.login && senha == jsonLoginCorreto.senha){\n        var privateKey = \"minhaChaveSuperSecreta\";\n        var token = jwt.sign({ foo: 'bar' }, privateKey);\n        return  [token, jsonLoginCorreto.tipoPerfil];\n    }\n    else{\n        alert(\"Login ou senha incorretos\");\n        return [];\n    }\n\n}\nlet jsonLoginCorreto = {\n    \"login\": \"andre\",\n    \"senha\": \"12345\",\n    \"tipoPerfil\" : \"cliente\"\n}\n\n\n\nexport default Login;\n\n\n\n\n// em linhas ou colunas, usando flex\n//  ou em linhas e colunas, usando grid"]},"metadata":{},"sourceType":"module"}